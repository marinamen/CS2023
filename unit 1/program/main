import time
print("imported time")
import ccxt
print("imported cxxt")
import keyboard
print("imported keyboard")








def menu():
    print("\n ‚ôØ menu ‡≥Ä :")
    print("1. Register")
    print("2. Login")
    print("3. Forgot Password")

def loading():
    time.sleep(0.5)
    print("‚è≥")
    time.sleep(1)
    print("‚åõÔ∏è")
    time.sleep(0.5)

def register(username, password):
    with open('data.txt', 'a') as datafile:
        datafile.write(f'{username}:{password}::0.0\n')

def login(username, password):
    with open('data.txt', 'r') as datafile:
        lines = datafile.readlines()
        for line in lines:
            stored_user, stored_pass, _, _ = line.strip().split(':')
            if username == stored_user and password == stored_pass:
                return True
    return False

def show_balance(username):
    with open('data.txt', 'r') as datafile:
        lines = datafile.readlines()
        for line in lines:
            stored_user, stored_pass, _, balance = line.strip().split(':')
            if username == stored_user:
                return float(balance)
    return None

import matplotlib.pyplot as plt
import datetime

def plot_transactions(stored_user,stored_pass,balance):
    with open('transactions.txt', 'r') as file:
        lines = file.readlines()
    user_transactions = [line.strip().split(',') for line in lines if line.strip().split(',')[0] == username and line.strip().split(',')[1] == password]
    dates = [datetime.datetime.now()] 
    balances = [0]
    for transaction in user_transactions:
        date_str, _, balance_str = transaction
        date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
        balance = int(balance_str)
        dates.append(date)
        balances.append(balance)
    
    plt.figure(figsize=(10, 5))
    plt.plot(dates, balances, marker='o', linestyle='-', color='b')
    plt.title(f"{username}'s transaction history‡≥Ä ")
    plt.xlabel('date')
    plt.ylabel('balance (SOL amount)')
    plt.grid(True)
    plt.show()


def deposit(username, amount):
    with open('data.txt', 'r') as datafile:
        all_lines = datafile.readlines()
    
    for i, line in enumerate(all_lines):
        stored_user, stored_pass, _, balance = line.strip().split(':')
        if username == stored_user:
            new_balance = float(balance) + amount
            all_lines[i] = f'{username}:{stored_pass}::{new_balance:.2f}\n'
            break
    
    with open('data.txt', 'w') as datafile:
        datafile.writelines(all_lines)

def withdraw(username, amount):
    with open('data.txt', 'r') as datafile:
        all_lines = datafile.readlines()
    
    for i, line in enumerate(all_lines):
        stored_user, stored_pass, _, balance = line.strip().split(':')
        if username == stored_user:
            if amount <= float(balance):
                new_balance = float(balance) - amount
                all_lines[i] = f'{username}:{stored_pass}::{new_balance:.2f}\n'
                # Add the transaction to the transaction history
                transaction_history = f"{username}: Withdraw: {amount} USD: {time.ctime()}"
                with open('transactions.txt', 'a') as transfile:
                    transfile.write(transaction_history + '\n')
            else:
                return False
    
    with open('data.txt', 'w') as datafile:
        datafile.writelines(all_lines)
    
    return True

def sort_transactions():
    with open('transactions.txt', 'r') as transfile:
        transactions = transfile.readlines()
    transactions.sort(key=lambda x: x.split(':')[-1])
    print("\n ‚ôØ Sorted Transactions ‡≥Ä :")
    for transaction in transactions:
        print(transaction.strip())

def forgot_password():
    username = input("Enter your username (to confirm your existence in our database): ")
    found = False
    
    with open('data.txt', 'r') as datafile:
        lines = datafile.readlines()
        for line in lines:
            stored_user, _, security1, security2 = line.strip().split(':')
            if username == stored_user:
                found = True
                break

    if found:
        security1_answer = input(f"What year did/will you graduate school in:  ")
        security2_answer = input(f"Where were you raised: ")
        
        with open('data.txt', 'r') as datafile:
            lines = datafile.readlines()
            for i, line in enumerate(lines):
                stored_user, stored_pass, stored_security1, stored_security2, _ = line.strip().split(':')
                if (
                    username == stored_user 
                    and security1_answer == stored_security1 
                    and security2_answer == stored_security2
                ):
                    new_pass = input("Enter a new password: ")
                    print(f"Password reset successful! Your new password is: {new_pass}")
                    lines[i] = f'{username}:{new_pass}:{security1}:{security2}::0.0\n'
                    
                    with open('data.txt', 'w') as datafile:
                        datafile.writelines(lines)
                    break
            else:
                print("Security questions validation failed. Please try again.\n")
    else:
        print("Username not found. Please try again.\n")
def drawgraph(tr

def pretty_banner(text):
    banner = f'''
         ‚ï≠‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ ‚ú© ‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ‚ïÆ
                {text}
         ‚ï∞‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ ‚ú© ‚îÄ‚îÄ ‚ãÖ ‚ãÖ ‚îÄ‚îÄ‚ïØ
    '''
    return banner

while True:
    text = "Welcome to your Digital Wallet!"
    banner = pretty_banner(text)
    print(banner)

    menu()
    choice = input("Select an option (1/2/3/4): ")

    if choice == '1':
        username = input("Enter your username: ")
        password = input("Enter your password: ")
        register(username, password)
        print("Registration successful!\n")
    elif choice == '2':
        username = input("Enter your username: ")
        password = input("Enter your password: ")
        if login(username, password):
            while True:
                print("\nUser Menu:")
                print("1. Deposit  ‚ú©  ")
                print("2. Withdraw  ‚ú© ")
                print("3. Check Balance  ‚ú© ")
                print("4. Sort Transactions  ‚ú© ")
                print("5. Graph of Transactions  ‚ú©")
                print("6. Logout  ‚ú©")
                menu2 = input("Select an option  ‡≥Ä : ")
                if menu2 == '1':
                    amount = float(input("Enter the deposit amount: "))
                    deposit(username, amount)
                    print(f"Deposited SOL{amount}. New balance: SOL{show_balance(username):.2f}")
                elif menu2 == '2':
                    amount = float(input("Enter the withdrawal amount: "))
                    if withdraw(username, amount):
                        print(f"Withdrew SOL{amount}. New balance: SOL{show_balance(username):.2f}")
                    else:
                        print("Insufficient balance.")
                elif menu2 == '3':
                    balance = show_balance(username)
                    if balance is not None:
                        currency_input=input("Press a key to choose a currency:\nA. Euro [Ã≤ÃÖ‚Ç¨Ã≤ÃÖ(Ã≤ÃÖ20Ã≤ÃÖ)Ã≤ÃÖ‚Ç¨Ã≤ÃÖ]\nB. Dollar[Ã≤ÃÖ$(Ã≤ÃÖ1)Ã≤ÃÖ$]\nC. Pound[Ã≤ÃÖ¬£(Ã≤ÃÖ10)Ã≤ÃÖ¬£]\nD. Yen[Ã≤ÃÖ¬•(Ã≤ÃÖ1000Ã≤ÃÖ)Ã≤ÃÖ¬•])
                        capitalise_cinput=currency_input.upper()
                        if capitalise_cinput == "A":
                            beuro=(balance*solana_price)*0.95
                            print(f"Your currency in SOL is{balance} and its worth{beuro}‚Ç¨")
                        elif capitalise_cinput == "B":
                            bdollar=balance*solana_price
                            print(f"Your currency in SOL is{balance} and its worth${bdollar}")
                        elif capitalise_cinput == "C":
                            bpound=(balance*solana_price)*0.82
                            print(f"Your currency in SOL is{balance} and its worth¬£{beuro}")
                        elif capitalise_cinput == "D":
                            byen=(balance*solana_price)*148
                            print(f"Your currency in SOL is{balance} and its worth{byen}¬•")
                        else:
                            loading()
                            print(f"{darkred(ñ¶π _ ñ¶π)...\nError: Invalid choice{default}")
                    
                    else:
                        print("Error retrieving balance.")

                elif menu2 == '4':
                    sort_transactions()
                
                elif menu2 == '5':
                    plot_transactions(stored_user, stored_pass, balance)
                        
                elif menu2 == '6':
                    print("Logging out.")
                    break
                else:
                    print("Invalid choice. Please select a valid option (1/2/3/4/5).")
        else:
            print("Invalid login credentials. Please try again.\n")
    elif choice == '3':
        forgot_password()
    elif choice == '4':
        sort_transactions()
    else:
        print("Invalid choice. Please select a valid option (1/2/3/4).")
